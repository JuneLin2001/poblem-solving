"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[44],{2164:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>m,frontMatter:()=>d,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"LeetCode/Check if Array Is Sorted and Rotated/README","title":"1752. Check if Array Is Sorted and Rotated","description":"Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.","source":"@site/docs/LeetCode/1752. Check if Array Is Sorted and Rotated/README.mdx","sourceDirName":"LeetCode/1752. Check if Array Is Sorted and Rotated","slug":"/LeetCode/Check if Array Is Sorted and Rotated/","permalink":"/solve-problems/LeetCode/Check if Array Is Sorted and Rotated/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"1752. Check if Array Is Sorted and Rotated","description":"Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.","keywords":["LeetCode","1752. Check if Array Is Sorted and Rotated","Easy","Array"]},"sidebar":"tutorialSidebar","previous":{"title":"1523. Count Odd Numbers in an Interval Range","permalink":"/solve-problems/LeetCode/Count Odd Numbers in an Interval Range/"},"next":{"title":"1790. Check if One String Swap Can Make Strings Equal","permalink":"/solve-problems/LeetCode/Check if One String Swap Can Make Strings Equal/"}}');var a=r(4848),i=r(8453),s=r(5537),o=r(9329),l=r(7548);const d={title:"1752. Check if Array Is Sorted and Rotated",description:"Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.",keywords:["LeetCode","1752. Check if Array Is Sorted and Rotated","Easy","Array"]},u="frontMatter.title",c={},h=[{value:"Description",id:"description",level:2},{value:"Example 1:",id:"example-1",level:4},{value:"Example 2:",id:"example-2",level:4},{value:"Example 3:",id:"example-3",level:4},{value:"Constraints:",id:"constraints",level:2},{value:"Solution",id:"solution",level:2},{value:"\u89e3\u984c\u601d\u8def",id:"\u89e3\u984c\u601d\u8def",level:2},{value:"\u5fc3\u5f97",id:"\u5fc3\u5f97",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"frontmattertitle",children:(0,a.jsx)(n.a,{href:"https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/",children:d.title})})}),"\n","\n",(0,a.jsx)(l.A,{difficulty:"Easy"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(o.A,{value:"description",label:"\u984c\u76ee\u63cf\u8ff0",default:!0,children:[(0,a.jsx)(n.h2,{id:"description",children:"Description"}),(0,a.jsx)(n.p,{children:"Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false."}),(0,a.jsx)(n.p,{children:"There may be duplicates in the original array."}),(0,a.jsx)(n.p,{children:"Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation."}),(0,a.jsx)(n.h4,{id:"example-1",children:"Example 1:"}),(0,a.jsx)(n.p,{children:"Input: nums = [3,4,5,1,2]\nOutput: true\nExplanation: [1,2,3,4,5] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2]."}),(0,a.jsx)(n.h4,{id:"example-2",children:"Example 2:"}),(0,a.jsx)(n.p,{children:"Input: nums = [2,1,3,4]\nOutput: false\nExplanation: There is no sorted array once rotated that can make nums."}),(0,a.jsx)(n.h4,{id:"example-3",children:"Example 3:"}),(0,a.jsx)(n.p,{children:"Input: nums = [1,2,3]\nOutput: true\nExplanation: [1,2,3] is the original sorted array.\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums."}),(0,a.jsx)(n.h2,{id:"constraints",children:"Constraints:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"1 <= nums.length <= 100\n1 <= nums[i] <= 100\n"})}),(0,a.jsx)(n.p,{children:"Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?"})]}),(0,a.jsxs)(o.A,{value:"solution",label:"\u89e3\u7b54",children:[(0,a.jsx)(n.h2,{id:"solution",children:"Solution"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar check = function (nums) {\n  let count = 0;\n\n  for (i = 0; i < nums.length; i++) {\n    if (nums[i] > nums[(i + 1) % nums.length]) {\n      count++;\n    }\n  }\n\n  return count <= 1;\n};\n\n"})})]})]}),"\n",(0,a.jsx)(n.h2,{id:"\u89e3\u984c\u601d\u8def",children:"\u89e3\u984c\u601d\u8def"}),"\n",(0,a.jsx)(n.p,{children:"\u60f3\u6cd5\u5c31\u662f\u66b4\u529b\u89e3\u7684\u904d\u6b77\u9663\u5217\u6bd4\u8f03\u9663\u5217\u662f\u5426\u70ba\u975e\u905e\u6e1b\uff08[3,3,3,3]\u9019\u7a2e\u5168\u90e8\u90fd\u540c\u4e00\u500b\u6578\u7684\u4e5f\u7b97\u975e\u905e\u6e1b\u6240\u4ee5\u6703\u662f true\uff09\uff0c\u4f46\u7531\u65bc\u9663\u5217\u53ef\u80fd\u662f\u65cb\u8f49\u904e\u7684\u6240\u4ee5\u67091\u6b21\u7684\u5bec\u9650\uff0c\u5982\u679c\u4e0d\u53ea1\u6b21\u7684\u8a71\u5c31\u8981\u7b97 false \u4e86"}),"\n",(0,a.jsx)(n.h2,{id:"\u5fc3\u5f97",children:"\u5fc3\u5f97"}),"\n",(0,a.jsx)(n.p,{children:"U\u9ede\u5c0f\u96e3\uff0c\u4e00\u958b\u59cb\u6c92\u770b\u61c2\u984c\u76ee Rotated \u7684\u610f\u601d\uff0c\u60f3\u8aaa\u70ba\u4f55[2,1]\u4e5f\u7b97true\uff0c\u5f8c\u4f86\u518d\u8b80\u4e00\u6b21\u4e4b\u5f8c\u628a\u908f\u8f2f\u6253\u6389\u91cd\u5beb\u4e00\u6b21\u624d\u6210\u529f"})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);