"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9717],{3552:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>m,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"LeetCode/Minimum Size Subarray Sum/README","title":"209. Minimum Size Subarray Sum","description":"Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.","source":"@site/docs/LeetCode/209. Minimum Size Subarray Sum/README.mdx","sourceDirName":"LeetCode/209. Minimum Size Subarray Sum","slug":"/LeetCode/Minimum Size Subarray Sum/","permalink":"/problem-solving/LeetCode/Minimum Size Subarray Sum/","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Yen-Chun Lin","lastUpdatedAt":1759305873000,"frontMatter":{"title":"209. Minimum Size Subarray Sum","description":"Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.","keywords":["LeetCode","209. Minimum Size Subarray Sum","Medium","Array","Binary Search","Sliding Window","Prefix Sum"]},"sidebar":"tutorialSidebar","previous":{"title":"11. Container With Most Water","permalink":"/problem-solving/LeetCode/Container With Most Water/"},"next":{"title":"349. Intersection of Two Arrays","permalink":"/problem-solving/LeetCode/Intersection of Two Arrays/"}}');var i=t(4848),a=t(8453),s=t(1470),l=t(9365),u=t(2693);const o={title:"209. Minimum Size Subarray Sum",description:"Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.",keywords:["LeetCode","209. Minimum Size Subarray Sum","Medium","Array","Binary Search","Sliding Window","Prefix Sum"]},m="frontMatter.title",h={},d=[{value:"Description",id:"description",level:2},{value:"Example 1:",id:"example-1",level:4},{value:"Example 2:",id:"example-2",level:4},{value:"Example 3:",id:"example-3",level:4},{value:"Constraints:",id:"constraints",level:3},{value:"Solution",id:"solution",level:2},{value:"\u89e3\u984c\u601d\u8def",id:"\u89e3\u984c\u601d\u8def",level:3},{value:"\u5fc3\u5f97",id:"\u5fc3\u5f97",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"frontmattertitle",children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/minimum-size-subarray-sum/",children:o.title})})}),"\n","\n",(0,i.jsx)(u.A,{difficulty:"Medium"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(l.A,{value:"description",label:"\u984c\u76ee\u63cf\u8ff0",default:!0,children:[(0,i.jsx)(n.h2,{id:"description",children:"Description"}),(0,i.jsx)(n.p,{children:"Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead."}),(0,i.jsx)(n.h4,{id:"example-1",children:"Example 1:"}),(0,i.jsx)(n.p,{children:"Input: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint."}),(0,i.jsx)(n.h4,{id:"example-2",children:"Example 2:"}),(0,i.jsx)(n.p,{children:"Input: target = 4, nums = [1,4,4]\nOutput: 1"}),(0,i.jsx)(n.h4,{id:"example-3",children:"Example 3:"}),(0,i.jsx)(n.p,{children:"Input: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0"}),(0,i.jsx)(n.h3,{id:"constraints",children:"Constraints:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"1 <= target <= 109\n1 <= nums.length <= 105\n1 <= nums[i] <= 104\n"})}),(0,i.jsx)(n.p,{children:"Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n))."})]}),(0,i.jsxs)(l.A,{value:"solution",label:"\u89e3\u7b54",children:[(0,i.jsx)(n.h2,{id:"solution",children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"/**\n * @param {number} target\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function (target, nums) {\n  let minLength = nums.length + 1;\n  let left = 0;\n  let right = 0;\n  let currentSum = 0;\n\nwhile (right < nums.length) {\ncurrentSum += nums[right];\n\n    while (currentSum >= target) {\n      if (minLength > right - left + 1) {\n        minLength = right - left + 1;\n      }\n      currentSum -= nums[left];\n      left++;\n    }\n\n    right++;\n\n}\nif (minLength === nums.length + 1) {\nreturn 0;\n} else {\nreturn minLength;\n}\n};\n"})})]})]}),"\n",(0,i.jsx)(n.h3,{id:"\u89e3\u984c\u601d\u8def",children:"\u89e3\u984c\u601d\u8def"}),"\n",(0,i.jsx)(n.p,{children:"\u7df4\u7fd2 slide window\uff0c\u9996\u5148\u7531 right \u958b\u59cb\u6162\u6162\u5f80\u53f3\u79fb\u52d5\uff0c\u4e26\u52a0\u7e3d left \u548c right \u7bc4\u570d\u7684\u9019\u500b window \u4e2d\u7684\u7e3d\u548c\uff0c\u76f4\u5230\u5927\u65bc target\u3002\u7576\u5927\u65bc target \u6642\u5019 left \u5c31\u5f80\u53f3\u79fb\u52d5\u4f86\u6e1b\u5c11 minLength \u7684\u53ef\u80fd\u503c\uff0c\u91cd\u8907\u79fb\u52d5 left \u548c right \u76f4\u5230\u627e\u51fa\u6b63\u78ba\u7b54\u6848\u3002"}),"\n",(0,i.jsx)(n.h3,{id:"\u5fc3\u5f97",children:"\u5fc3\u5f97"}),"\n",(0,i.jsxs)(n.p,{children:["\u4e5f\u662f\u770b\u4e86 ",(0,i.jsx)(n.a,{href:"https://www.udemy.com/course/algorithm-data-structure",children:"Wilson Ren \u7684 \u8cc7\u6599\u7d50\u69cb\u8207\u6f14\u7b97\u6cd5 (JavaScript)"})," \u4ecb\u7d39\u9019\u984c\u7d93\u5178\u984c\uff0c\u8981\u628a\u9019\u4e9b\u984c\u578b\u5f04\u719f\u6253\u597d\u6f14\u7b97\u6cd5\u57fa\u790e!"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);